name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    services:
      # Setup PostgreSQL service
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.USER }}
          POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE }}
        ports:
          - 5432:5432
        # Set health checks
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Populate database
        env:
          POSTGRES_USER: ${{ secrets.USER }}
          POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE }}
        run: |
          PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -a -f ./fast_api_app/populate_db.sql

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r pipeline_requirements.txt

      # Set environment variables from GitHub secrets
      - name: Set up environment variables
        run: |
          echo "host=localhost" >> $GITHUB_ENV
          echo "database=${{ secrets.DATABASE }}" >> $GITHUB_ENV
          echo "user=${{ secrets.USER }}" >> $GITHUB_ENV
          echo "password=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
          echo "port=${{ secrets.PORT }}" >> $GITHUB_ENV

      - name: Run tests
        run: python -m pytest tests/ -vv

      - name: Code quality check
        run: |
          python -m flake8 --max-line-length=120
          python -m black . --check

      - name: Build artifact
        run: poetry build

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: j4ro123/fastapi-app:latest
          secrets: |
            "host=${{ secrets.HOST }}"
            "database=${{ secrets.DATABASE }}"
            "user=${{ secrets.USER }}"
            "password=${{ secrets.PASSWORD }}"
            "port=${{ secrets.PORT }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push j4ro123/fastapi-app:latest

      # - name: Start app and postgres containers in one network
      #   run: docker-compose up -d

      - name: Run Docker container
        run: |
          docker run -d -p 8000:8000 \
          --env host=db \
          --env database=${{ secrets.DATABASE }} \
          --env user=${{ secrets.USER }} \
          --env password=${{ secrets.PASSWORD }} \
          --env port=${{ secrets.PORT }} \
          --name fastapi-app j4ro123/fastapi-app:latest

      - name: Wait for the application to be ready
        run: sleep 3 # Waits for 3 seconds

      - name: Check Docker container logs
        run: docker logs fastapi-app

      - name: Check if the app is running
        run: curl -I http://localhost:8000/

      - name: Removing previous chrome instances on runner
        run: sudo apt purge google-chrome-stable

      - name: Run Selenium tests
        run: python selenium/selenium_test.py

      - name: Check Docker container logs
        run: docker logs fastapi-app
