name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    services:
      # Setup PostgreSQL service
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: ${{ secrets.HOST }}
          POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE }}
        ports:
          - 5432:5432
        # Set health checks
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Populate database
        env:
          POSTGRES_USER: ${{ secrets.HOST }}
          POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE }}
        run: |
          PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -a -f ./populate_db.sql

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      # Set environment variables from GitHub secrets
      - name: Set up environment variables
        run: |
          echo "host=${{ secrets.HOST }}" >> $GITHUB_ENV
          echo "database=${{ secrets.DATABASE }}" >> $GITHUB_ENV
          echo "user=${{ secrets.USER }}" >> $GITHUB_ENV
          echo "password=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
          echo "port=${{ secrets.PORT }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: python -m pytest tests/ -vv

      - name: Code quality check
        run: |
          python -m flake8 --max-line-length=120
          python -m black --check

      # - name: Run Selenium tests
      #   run: pytest tests/selenium_tests

      - name: Build artifact
        run: poetry build

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: j4ro123/fastapi-app:latest
          secrets: |
            "host=${{ secrets.HOST }}"
            "database=${{ secrets.DATABASE }}"
            "user=${{ secrets.USER }}"
            "password=${{ secrets.PASSWORD }}"
            "port=${{ secrets.PORT }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push j4ro123/fastapi-app:latest
